"""CoderAgent: 이슈를 읽고 코드를 자동으로 생성"""
import os
import json
import re
import textwrap
from openai import OpenAI
import pathlib
import tempfile
from autogen_project.utils.github import github_manager
from autogen_project.utils.constants import OPENAI_MODEL


def run_coder_agent():
    """코더 에이전트 실행 함수"""
    issue = github_manager.fetch_current_issue()
    if issue is None:
        print("[coder] no now-working issue")
        return

    branch = f"autogen/{issue.number}-{issue.title[:30].replace(' ', '-')}"
    github_manager.create_branch(branch)

    # Include current tree for context
    tree = pathlib.Path('.').rglob('*')
    file_list = "\n".join(
        str(p) for p in tree
        if p.is_file() and p.stat().st_size < 50000
    )

    prompt = textwrap.dedent(f"""
    당신은 Django 풀스택 개발 AI입니다. 다음 작업 이슈를 구현하십시오.
    ### 이슈
    {issue.title}
    {issue.body}

    ### 기존 파일 목록
    {file_list}

    ### 출력 포맷
    JSON 배열. 각 원소는 {{"path": "파일경로", "content": "파일내용"}}. 필요한 새 파일/수정 파일 포함.
    """)

    client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
    resp = client.chat.completions.create(
        model=OPENAI_MODEL,
        messages=[{"role": "user", "content": prompt}],
        temperature=0.2
    )

    code_json = resp.choices[0].message.content
    if match := re.search(r"```json\s*(.*?)```", code_json, re.S):
        code_json = match.group(1)
    files = json.loads(code_json)

    for f in files:
        github_manager.upsert_file(
            f["path"],
            f["content"],
            branch,
            message=f"Add/Update {f['path']} [auto]"
        )

    pr_url = github_manager.create_pr(
        title=f"AI: {issue.title}",
        branch=branch,
        body="Auto‑generated by CoderAgent"
    )
    issue.create_comment(f"PR opened: {pr_url}")
    issue.add_to_labels("in-review")
    issue.remove_from_labels("now-working")


if __name__ == "__main__":
    run_coder_agent()