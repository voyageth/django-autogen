"""CoderAgent: 이슈를 읽고 코드를 자동으로 생성"""
import os, json, re, textwrap, openai, pathlib, tempfile
from github import Github
from autogen_project.utils.github import create_branch, upsert_file, create_pr
from .user_agent import fetch_current_issue
from ..utils.constants import OPENAI_MODEL

openai.api_key = os.getenv("OPENAI_API_KEY")
g = Github(os.getenv("GITHUB_TOKEN"))
repo = g.get_repo(os.getenv("GITHUB_REPOSITORY"))

# 1. now-working 라벨이 있는 이슈 찾기
issues = list(repo.get_issues(state="open", labels=["now-working"]))
if not issues:
    print("No issues with 'now-working' label found.")
    exit(0)

issue = issues[0]
print(f"Working on issue: #{issue.number} - {issue.title}")

# 2. GPT로 코드 생성
prompt = f"""
다음 이슈를 해결하기 위한 코드를 생성하세요:
제목: {issue.title}
설명: {issue.body}

코드는 다음 형식으로 출력하세요:
```python
# 코드
```

```requirements.txt
# 필요한 패키지
```
"""

resp = openai.ChatCompletion.create(
    model=OPENAI_MODEL,
    messages=[{"role": "user", "content": prompt}],
    temperature=0.2
)

# 3. 코드 저장 및 PR 생성
code = resp.choices[0].message.content

# TODO: 코드를 파일로 저장하고 PR 생성하는 로직 구현
print("Generated code:", code)

def run_coder_agent():
    """코더 에이전트 실행 함수"""
    issue = fetch_current_issue()
    if issue is None:
        print("[coder] no now-working issue")
        return

    repo_name = os.getenv("GITHUB_REPOSITORY")
    branch = f"autogen/{issue.number}-{issue.title[:30].replace(' ', '-')}"
    create_branch(branch)

    # Include current tree for context
    tree = pathlib.Path('.').rglob('*')
    file_list = "\n".join(
        str(p) for p in tree 
        if p.is_file() and p.stat().st_size < 50000
    )

    prompt = textwrap.dedent(f"""
    당신은 Django 풀스택 개발 AI입니다. 다음 작업 이슈를 구현하십시오.
    ### 이슈
    {issue.title}
    {issue.body}

    ### 기존 파일 목록
    {file_list}

    ### 출력 포맷
    JSON 배열. 각 원소는 {{"path": "파일경로", "content": "파일내용"}}. 필요한 새 파일/수정 파일 포함.
    """)

    resp = openai.ChatCompletion.create(
        model=OPENAI_MODEL,
        messages=[{"role": "user", "content": prompt}],
        temperature=0.2
    )
    
    code_json = resp.choices[0].message.content
    if match := re.search(r"```json\s*(.*?)```", code_json, re.S):
        code_json = match.group(1)
    files = json.loads(code_json)

    for f in files:
        upsert_file(
            f["path"], 
            f["content"], 
            branch, 
            message=f"Add/Update {f['path']} [auto]"
        )

    pr_url = create_pr(
        title=f"AI: {issue.title}", 
        branch=branch, 
        body="Auto‑generated by CoderAgent"
    )
    issue.create_comment(f"PR opened: {pr_url}")
    issue.add_to_labels("in-review")
    issue.remove_from_labels("now-working")


if __name__ == "__main__":
    run_coder_agent()